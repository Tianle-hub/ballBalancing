// Generated by gencpp from file tum_ics_lacquey_gripper_msgs/getGripperStateResponse.msg
// DO NOT EDIT!


#ifndef TUM_ICS_LACQUEY_GRIPPER_MSGS_MESSAGE_GETGRIPPERSTATERESPONSE_H
#define TUM_ICS_LACQUEY_GRIPPER_MSGS_MESSAGE_GETGRIPPERSTATERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tum_ics_lacquey_gripper_msgs
{
template <class ContainerAllocator>
struct getGripperStateResponse_
{
  typedef getGripperStateResponse_<ContainerAllocator> Type;

  getGripperStateResponse_()
    : states()
    , currentState()  {
    }
  getGripperStateResponse_(const ContainerAllocator& _alloc)
    : states(_alloc)
    , currentState(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _states_type;
  _states_type states;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _currentState_type;
  _currentState_type currentState;





  typedef boost::shared_ptr< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct getGripperStateResponse_

typedef ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<std::allocator<void> > getGripperStateResponse;

typedef boost::shared_ptr< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse > getGripperStateResponsePtr;
typedef boost::shared_ptr< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse const> getGripperStateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator1> & lhs, const ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator2> & rhs)
{
  return lhs.states == rhs.states &&
    lhs.currentState == rhs.currentState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator1> & lhs, const ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tum_ics_lacquey_gripper_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff0be24d823aa1cfde92641488f9e02a";
  }

  static const char* value(const ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff0be24d823aa1cfULL;
  static const uint64_t static_value2 = 0xde92641488f9e02aULL;
};

template<class ContainerAllocator>
struct DataType< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tum_ics_lacquey_gripper_msgs/getGripperStateResponse";
  }

  static const char* value(const ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] states\n"
"string currentState\n"
"\n"
;
  }

  static const char* value(const ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.states);
      stream.next(m.currentState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct getGripperStateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tum_ics_lacquey_gripper_msgs::getGripperStateResponse_<ContainerAllocator>& v)
  {
    s << indent << "states[]" << std::endl;
    for (size_t i = 0; i < v.states.size(); ++i)
    {
      s << indent << "  states[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.states[i]);
    }
    s << indent << "currentState: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.currentState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUM_ICS_LACQUEY_GRIPPER_MSGS_MESSAGE_GETGRIPPERSTATERESPONSE_H
